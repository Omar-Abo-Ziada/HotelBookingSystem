// <auto-generated />
using System;
using HotelBookingSystem.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelBookingSystem.EF.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotelBookingSystem.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID")
                        .IsUnique()
                        .HasFilter("[CustomerID] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Bed", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            RoomID = 1
                        },
                        new
                        {
                            ID = 2,
                            RoomID = 2
                        },
                        new
                        {
                            ID = 3,
                            RoomID = 2
                        },
                        new
                        {
                            ID = 4,
                            RoomID = 3
                        },
                        new
                        {
                            ID = 5,
                            RoomID = 3
                        },
                        new
                        {
                            ID = 6,
                            RoomID = 3
                        },
                        new
                        {
                            ID = 7,
                            RoomID = 4
                        },
                        new
                        {
                            ID = 8,
                            RoomID = 5
                        },
                        new
                        {
                            ID = 9,
                            RoomID = 5
                        },
                        new
                        {
                            ID = 10,
                            RoomID = 6
                        },
                        new
                        {
                            ID = 11,
                            RoomID = 6
                        },
                        new
                        {
                            ID = 12,
                            RoomID = 6
                        },
                        new
                        {
                            ID = 13,
                            RoomID = 7
                        },
                        new
                        {
                            ID = 14,
                            RoomID = 8
                        },
                        new
                        {
                            ID = 15,
                            RoomID = 8
                        },
                        new
                        {
                            ID = 16,
                            RoomID = 9
                        },
                        new
                        {
                            ID = 17,
                            RoomID = 9
                        },
                        new
                        {
                            ID = 18,
                            RoomID = 9
                        },
                        new
                        {
                            ID = 19,
                            RoomID = 10
                        },
                        new
                        {
                            ID = 20,
                            RoomID = 11
                        },
                        new
                        {
                            ID = 21,
                            RoomID = 11
                        },
                        new
                        {
                            ID = 22,
                            RoomID = 12
                        },
                        new
                        {
                            ID = 23,
                            RoomID = 12
                        },
                        new
                        {
                            ID = 24,
                            RoomID = 12
                        },
                        new
                        {
                            ID = 25,
                            RoomID = 13
                        },
                        new
                        {
                            ID = 26,
                            RoomID = 14
                        },
                        new
                        {
                            ID = 27,
                            RoomID = 14
                        },
                        new
                        {
                            ID = 28,
                            RoomID = 15
                        },
                        new
                        {
                            ID = 29,
                            RoomID = 15
                        },
                        new
                        {
                            ID = 30,
                            RoomID = 15
                        },
                        new
                        {
                            ID = 31,
                            RoomID = 16
                        },
                        new
                        {
                            ID = 32,
                            RoomID = 17
                        },
                        new
                        {
                            ID = 33,
                            RoomID = 17
                        },
                        new
                        {
                            ID = 34,
                            RoomID = 18
                        },
                        new
                        {
                            ID = 35,
                            RoomID = 18
                        },
                        new
                        {
                            ID = 36,
                            RoomID = 18
                        },
                        new
                        {
                            ID = 37,
                            RoomID = 19
                        },
                        new
                        {
                            ID = 38,
                            RoomID = 20
                        },
                        new
                        {
                            ID = 39,
                            RoomID = 20
                        });
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Booking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPreviousCustomer")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "City1",
                            Country = "Country1",
                            HotelID = 1,
                            PostalCode = "12345",
                            State = "State1",
                            Street = "Street1"
                        },
                        new
                        {
                            ID = 2,
                            City = "City2",
                            Country = "Country1",
                            HotelID = 1,
                            PostalCode = "12346",
                            State = "State1",
                            Street = "Street2"
                        },
                        new
                        {
                            ID = 3,
                            City = "City3",
                            Country = "Country1",
                            HotelID = 1,
                            PostalCode = "12347",
                            State = "State1",
                            Street = "Street3"
                        },
                        new
                        {
                            ID = 4,
                            City = "City1",
                            Country = "Country2",
                            HotelID = 2,
                            PostalCode = "22345",
                            State = "State2",
                            Street = "Street4"
                        },
                        new
                        {
                            ID = 5,
                            City = "City2",
                            Country = "Country2",
                            HotelID = 2,
                            PostalCode = "22346",
                            State = "State2",
                            Street = "Street5"
                        },
                        new
                        {
                            ID = 6,
                            City = "City3",
                            Country = "Country2",
                            HotelID = 2,
                            PostalCode = "22347",
                            State = "State2",
                            Street = "Street6"
                        },
                        new
                        {
                            ID = 7,
                            City = "City1",
                            Country = "Country3",
                            HotelID = 3,
                            PostalCode = "32345",
                            State = "State3",
                            Street = "Street7"
                        },
                        new
                        {
                            ID = 8,
                            City = "City2",
                            Country = "Country3",
                            HotelID = 3,
                            PostalCode = "32346",
                            State = "State3",
                            Street = "Street8"
                        },
                        new
                        {
                            ID = 9,
                            City = "City3",
                            Country = "Country3",
                            HotelID = 3,
                            PostalCode = "32347",
                            State = "State3",
                            Street = "Street9"
                        },
                        new
                        {
                            ID = 10,
                            City = "City1",
                            Country = "Country4",
                            HotelID = 4,
                            PostalCode = "42345",
                            State = "State4",
                            Street = "Street10"
                        },
                        new
                        {
                            ID = 11,
                            City = "City2",
                            Country = "Country4",
                            HotelID = 4,
                            PostalCode = "42346",
                            State = "State4",
                            Street = "Street11"
                        },
                        new
                        {
                            ID = 12,
                            City = "City3",
                            Country = "Country4",
                            HotelID = 4,
                            PostalCode = "42347",
                            State = "State4",
                            Street = "Street12"
                        },
                        new
                        {
                            ID = 13,
                            City = "City1",
                            Country = "Country5",
                            HotelID = 5,
                            PostalCode = "52345",
                            State = "State5",
                            Street = "Street13"
                        },
                        new
                        {
                            ID = 14,
                            City = "City2",
                            Country = "Country5",
                            HotelID = 5,
                            PostalCode = "52346",
                            State = "State5",
                            Street = "Street14"
                        },
                        new
                        {
                            ID = 15,
                            City = "City3",
                            Country = "Country5",
                            HotelID = 5,
                            PostalCode = "52347",
                            State = "State5",
                            Street = "Street15"
                        });
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AgeCategory")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreviousCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.CustomerBooking", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID", "BookingID");

                    b.HasIndex("BookingID");

                    b.ToTable("CustomerBookings");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BranchID = 1,
                            Name = "Employee1"
                        },
                        new
                        {
                            ID = 2,
                            BranchID = 1,
                            Name = "Employee2"
                        },
                        new
                        {
                            ID = 3,
                            BranchID = 1,
                            Name = "Employee3"
                        },
                        new
                        {
                            ID = 4,
                            BranchID = 1,
                            Name = "Employee4"
                        },
                        new
                        {
                            ID = 5,
                            BranchID = 1,
                            Name = "Employee5"
                        },
                        new
                        {
                            ID = 6,
                            BranchID = 2,
                            Name = "Employee6"
                        },
                        new
                        {
                            ID = 7,
                            BranchID = 2,
                            Name = "Employee7"
                        },
                        new
                        {
                            ID = 8,
                            BranchID = 2,
                            Name = "Employee8"
                        },
                        new
                        {
                            ID = 9,
                            BranchID = 2,
                            Name = "Employee9"
                        },
                        new
                        {
                            ID = 10,
                            BranchID = 2,
                            Name = "Employee10"
                        },
                        new
                        {
                            ID = 11,
                            BranchID = 3,
                            Name = "Employee11"
                        },
                        new
                        {
                            ID = 12,
                            BranchID = 3,
                            Name = "Employee12"
                        },
                        new
                        {
                            ID = 13,
                            BranchID = 3,
                            Name = "Employee13"
                        },
                        new
                        {
                            ID = 14,
                            BranchID = 3,
                            Name = "Employee14"
                        },
                        new
                        {
                            ID = 15,
                            BranchID = 3,
                            Name = "Employee15"
                        },
                        new
                        {
                            ID = 16,
                            BranchID = 4,
                            Name = "Employee16"
                        },
                        new
                        {
                            ID = 17,
                            BranchID = 4,
                            Name = "Employee17"
                        },
                        new
                        {
                            ID = 18,
                            BranchID = 4,
                            Name = "Employee18"
                        },
                        new
                        {
                            ID = 19,
                            BranchID = 4,
                            Name = "Employee19"
                        },
                        new
                        {
                            ID = 20,
                            BranchID = 4,
                            Name = "Employee20"
                        },
                        new
                        {
                            ID = 21,
                            BranchID = 5,
                            Name = "Employee21"
                        },
                        new
                        {
                            ID = 22,
                            BranchID = 5,
                            Name = "Employee22"
                        },
                        new
                        {
                            ID = 23,
                            BranchID = 5,
                            Name = "Employee23"
                        },
                        new
                        {
                            ID = 24,
                            BranchID = 5,
                            Name = "Employee24"
                        },
                        new
                        {
                            ID = 25,
                            BranchID = 5,
                            Name = "Employee25"
                        },
                        new
                        {
                            ID = 26,
                            BranchID = 6,
                            Name = "Employee26"
                        },
                        new
                        {
                            ID = 27,
                            BranchID = 6,
                            Name = "Employee27"
                        },
                        new
                        {
                            ID = 28,
                            BranchID = 6,
                            Name = "Employee28"
                        },
                        new
                        {
                            ID = 29,
                            BranchID = 6,
                            Name = "Employee29"
                        },
                        new
                        {
                            ID = 30,
                            BranchID = 6,
                            Name = "Employee30"
                        },
                        new
                        {
                            ID = 31,
                            BranchID = 7,
                            Name = "Employee31"
                        },
                        new
                        {
                            ID = 32,
                            BranchID = 7,
                            Name = "Employee32"
                        },
                        new
                        {
                            ID = 33,
                            BranchID = 7,
                            Name = "Employee33"
                        },
                        new
                        {
                            ID = 34,
                            BranchID = 7,
                            Name = "Employee34"
                        },
                        new
                        {
                            ID = 35,
                            BranchID = 7,
                            Name = "Employee35"
                        },
                        new
                        {
                            ID = 36,
                            BranchID = 8,
                            Name = "Employee36"
                        },
                        new
                        {
                            ID = 37,
                            BranchID = 8,
                            Name = "Employee37"
                        },
                        new
                        {
                            ID = 38,
                            BranchID = 8,
                            Name = "Employee38"
                        },
                        new
                        {
                            ID = 39,
                            BranchID = 8,
                            Name = "Employee39"
                        },
                        new
                        {
                            ID = 40,
                            BranchID = 8,
                            Name = "Employee40"
                        },
                        new
                        {
                            ID = 41,
                            BranchID = 9,
                            Name = "Employee41"
                        },
                        new
                        {
                            ID = 42,
                            BranchID = 9,
                            Name = "Employee42"
                        },
                        new
                        {
                            ID = 43,
                            BranchID = 9,
                            Name = "Employee43"
                        },
                        new
                        {
                            ID = 44,
                            BranchID = 9,
                            Name = "Employee44"
                        },
                        new
                        {
                            ID = 45,
                            BranchID = 9,
                            Name = "Employee45"
                        },
                        new
                        {
                            ID = 46,
                            BranchID = 10,
                            Name = "Employee46"
                        },
                        new
                        {
                            ID = 47,
                            BranchID = 10,
                            Name = "Employee47"
                        },
                        new
                        {
                            ID = 48,
                            BranchID = 10,
                            Name = "Employee48"
                        },
                        new
                        {
                            ID = 49,
                            BranchID = 10,
                            Name = "Employee49"
                        },
                        new
                        {
                            ID = 50,
                            BranchID = 10,
                            Name = "Employee50"
                        },
                        new
                        {
                            ID = 51,
                            BranchID = 11,
                            Name = "Employee51"
                        },
                        new
                        {
                            ID = 52,
                            BranchID = 11,
                            Name = "Employee52"
                        },
                        new
                        {
                            ID = 53,
                            BranchID = 11,
                            Name = "Employee53"
                        },
                        new
                        {
                            ID = 54,
                            BranchID = 11,
                            Name = "Employee54"
                        },
                        new
                        {
                            ID = 55,
                            BranchID = 11,
                            Name = "Employee55"
                        },
                        new
                        {
                            ID = 56,
                            BranchID = 12,
                            Name = "Employee56"
                        },
                        new
                        {
                            ID = 57,
                            BranchID = 12,
                            Name = "Employee57"
                        },
                        new
                        {
                            ID = 58,
                            BranchID = 12,
                            Name = "Employee58"
                        },
                        new
                        {
                            ID = 59,
                            BranchID = 12,
                            Name = "Employee59"
                        },
                        new
                        {
                            ID = 60,
                            BranchID = 12,
                            Name = "Employee60"
                        },
                        new
                        {
                            ID = 61,
                            BranchID = 13,
                            Name = "Employee61"
                        },
                        new
                        {
                            ID = 62,
                            BranchID = 13,
                            Name = "Employee62"
                        },
                        new
                        {
                            ID = 63,
                            BranchID = 13,
                            Name = "Employee63"
                        },
                        new
                        {
                            ID = 64,
                            BranchID = 13,
                            Name = "Employee64"
                        },
                        new
                        {
                            ID = 65,
                            BranchID = 13,
                            Name = "Employee65"
                        },
                        new
                        {
                            ID = 66,
                            BranchID = 14,
                            Name = "Employee66"
                        },
                        new
                        {
                            ID = 67,
                            BranchID = 14,
                            Name = "Employee67"
                        },
                        new
                        {
                            ID = 68,
                            BranchID = 14,
                            Name = "Employee68"
                        },
                        new
                        {
                            ID = 69,
                            BranchID = 14,
                            Name = "Employee69"
                        },
                        new
                        {
                            ID = 70,
                            BranchID = 14,
                            Name = "Employee70"
                        },
                        new
                        {
                            ID = 71,
                            BranchID = 15,
                            Name = "Employee71"
                        },
                        new
                        {
                            ID = 72,
                            BranchID = 15,
                            Name = "Employee72"
                        },
                        new
                        {
                            ID = 73,
                            BranchID = 15,
                            Name = "Employee73"
                        },
                        new
                        {
                            ID = 74,
                            BranchID = 15,
                            Name = "Employee74"
                        },
                        new
                        {
                            ID = 75,
                            BranchID = 15,
                            Name = "Employee75"
                        });
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Hotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Hotel A"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Hotel B"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Hotel C"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Hotel D"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Hotel E"
                        });
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChilds")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingID");

                    b.HasIndex("BranchID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchID = 1,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            BranchID = 1,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 21,
                            BranchID = 1,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            BranchID = 1,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 23,
                            BranchID = 1,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            BranchID = 2,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            BranchID = 2,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 24,
                            BranchID = 2,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            BranchID = 3,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            BranchID = 3,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            BranchID = 4,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            BranchID = 4,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            BranchID = 5,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            BranchID = 5,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            BranchID = 6,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            BranchID = 7,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 13,
                            BranchID = 8,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 14,
                            BranchID = 9,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 15,
                            BranchID = 10,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 16,
                            BranchID = 11,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 17,
                            BranchID = 12,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 18,
                            BranchID = 13,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 19,
                            BranchID = 13,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 20,
                            BranchID = 13,
                            IsBooked = false,
                            NumberOfAdults = 0,
                            NumberOfChilds = 0,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "de281d21-a2e8-4420-8c59-578be05c9dfc",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "6f574a69-e2dc-41ef-8be2-a7a81a14aa0f",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "03fe4ebc-d360-4ed1-baf5-f65989a3e3c5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "858feda0-7857-45e8-8eab-ce74a4f7d5f4",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.Customer", "Customer")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("HotelBookingSystem.Core.Models.ApplicationUser", "CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Bed", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Booking", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.Branch", "Branch")
                        .WithMany("Bookings")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Branch", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.Hotel", "Hotel")
                        .WithMany("Branches")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.CustomerBooking", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.Booking", "Booking")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingSystem.Core.Models.Customer", "Customer")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Employee", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Room", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.Booking", "Booking")
                        .WithMany("Rooms")
                        .HasForeignKey("BookingID");

                    b.HasOne("HotelBookingSystem.Core.Models.Branch", "Branch")
                        .WithMany("Rooms")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HotelBookingSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Booking", b =>
                {
                    b.Navigation("CustomerBookings");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Branch", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Employees");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Customer", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("CustomerBookings");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Hotel", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("HotelBookingSystem.Core.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
